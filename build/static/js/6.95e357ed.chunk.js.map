{"version":3,"sources":["components/Admin/DefaultAdminHeader/DefaultAdminHeader.tsx","components/Admin/SecondTypeScore/SecondTypeScore.tsx","containers/Admin/SecondTypeScore/SecondTypeScoreContainer.tsx","pages/AdminPage/SecondTypeScorePage.tsx"],"names":["DefaultAdminHeader","children","HeaderContainer","theme","className","to","activeClassName","exact","SecondTypeScore","tryDown","scoreDate","select","setSelect","tryUpload","name","id","onChange","e","target","value","onClick","htmlFor","type","data","map","i","key","examCode","userName","gradeType","cityName","applyType","gradeScore","absenceScore","volunteerScore","additionalScore","jobAptitudeScore","interviewScore","swAbilityScore","cooperationScore","totalInterviewScore","totalScore","isPassed","finalApplyType","observer","history","useHistory","store","useStore","GetSoftWare","ExcelApi","GetJob","GetCodingTest","GetSecondScoreExcel","uploadSw","uploadCodingTest","uploadJob","useState","setScoreDate","getSecondScore","ScoreStore","handleSecondScore","a","then","res","catch","err","handleAdmin","content","files","length","file","toast","success","response","status","warning","useEffect","error","SecondTypeScorePage"],"mappings":"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","file":"static/js/6.95e357ed.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./DefaultAdminHeader.scss\";\nimport HeaderContainer from \"containers/Header/HeaderContainer\";\n\ninterface DefaultAdminHeaderProps {\n  children: React.ReactNode;\n}\n\nconst DefaultAdminHeader = ({ children }: DefaultAdminHeaderProps) => {\n  return (\n    <>\n      <HeaderContainer theme={true} />\n      <div className=\"Admin\">\n        <div className=\"Admin-header\">\n          <NavLink\n            to=\"/admin/userList\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>지원자 현황</span>\n          </NavLink>\n          <NavLink\n            to=\"/admin/schoolCity\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>출신교별 현황</span>\n          </NavLink>\n          <NavLink\n            to=\"/admin/userRate\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>입학지원자경쟁률</span>\n          </NavLink>\n          <NavLink\n            to=\"/admin/receiptStatus\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>신입생 입학 전형 원부</span>\n          </NavLink>\n          <NavLink\n            exact\n            to=\"/admin/secondScore\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>2차 전형 점수 관리</span>\n          </NavLink>\n\n          <NavLink\n            to=\"/admin/interviewScore\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>2차 전형 면접 점수</span>\n          </NavLink>\n\n          <NavLink\n            to=\"/admin/userListPassed\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>1차/최종 합격 여부</span>\n          </NavLink>\n\n          <NavLink\n            to=\"/admin/userResultPage\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>결과 변경</span>\n          </NavLink>\n        </div>\n      </div>\n      {children}\n    </>\n  );\n};\n\nexport default DefaultAdminHeader;\n","import React from \"react\";\nimport { SecondScoreResponse } from \"util/types/Response\";\nimport \"./SecondTypeScore.scss\";\n\ninterface SecondTypeScoreProps {\n  tryDown: (key: string) => void;\n  scoreDate: SecondScoreResponse | undefined;\n  select: string;\n  setSelect: React.Dispatch<React.SetStateAction<string>>;\n  tryUpload: (e: React.ChangeEvent<HTMLInputElement>, content: string) => void;\n}\n\nconst SecondTypeScore = ({\n  tryDown,\n  scoreDate,\n  select,\n  setSelect,\n  tryUpload,\n}: SecondTypeScoreProps) => {\n  return (\n    <div className=\"SecondScore\">\n      <span className=\"SecondScore-title\">2차 전형 점수 관리</span>\n      <div className=\"SecondScore-buttons\">\n        <select\n          className=\"SecondScore-buttons-s-op\"\n          name=\"\"\n          id=\"\"\n          onChange={(e) => {\n            setSelect(e.target.value);\n          }}\n        >\n          <option className=\"SecondScore-buttons-s-op\" value={\"0\"}>\n            다운로드\n          </option>\n          <option className=\"SecondScore-buttons-s-op\" value={\"1\"}>\n            업로드\n          </option>\n        </select>\n        {select === \"0\" ? (\n          <>\n            <div className=\"SecondScore-buttons-download\">\n              <span>소프트웨어역량평가</span>\n              <button className=\"buttons\" onClick={() => tryDown(\"sw\")}>\n                서식 다운로드\n              </button>\n            </div>\n            <div className=\"SecondScore-buttons-download\">\n              <span>직무능력검사</span>\n              <button className=\"buttons\" onClick={() => tryDown(\"job\")}>\n                서식 다운로드\n              </button>\n            </div>\n            <div className=\"SecondScore-buttons-download\">\n              <span>코딩테스트</span>\n              <button className=\"buttons\" onClick={() => tryDown(\"coding\")}>\n                서식 다운로드\n              </button>\n            </div>\n            <div className=\"SecondScore-buttons-download\">\n              <span>최종 결과 다운로드</span>\n              <button\n                className=\"buttons\"\n                onClick={() => tryDown(\"secondScore\")}\n              >\n                엑셀 다운로드\n              </button>\n            </div>\n          </>\n        ) : (\n          <>\n            <div className=\"SecondScore-buttons-upload\">\n              <span>소프트웨어역량평가</span>\n              <label htmlFor=\"input-file1\" className=\"buttons\">\n                업로드\n              </label>\n              <input\n                type=\"file\"\n                id=\"input-file1\"\n                className=\"input-file\"\n                onChange={(e) => tryUpload(e, \"sw\")}\n              />\n            </div>\n            <div className=\"SecondScore-buttons-upload\">\n              <span>직무능력검사</span>\n              <label htmlFor=\"input-file2\" className=\"buttons\">\n                업로드\n              </label>\n              <input\n                type=\"file\"\n                id=\"input-file2\"\n                className=\"input-file\"\n                onChange={(e) => tryUpload(e, \"job\")}\n              />\n            </div>\n            <div className=\"SecondScore-buttons-upload\">\n              <span>코딩테스트</span>\n              <label htmlFor=\"input-file3\" className=\"buttons\">\n                업로드\n              </label>\n              <input\n                type=\"file\"\n                id=\"input-file3\"\n                className=\"input-file\"\n                onChange={(e) => tryUpload(e, \"coding\")}\n              />\n            </div>\n          </>\n        )}\n      </div>\n      <div className=\"SecondScore-table\">\n        <table className=\"SecondScore-table-list\">\n          <thead>\n            <tr className=\"SecondScore-table-list-title\">\n              <th>순번</th>\n              <th>수험번호</th>\n              <th>이름</th>\n              <th>학력</th>\n              <th>지역</th>\n              <th>1차합격전형</th>\n              <th>교과</th>\n              <th>출결</th>\n              <th>봉사</th>\n              <th>가산점</th>\n              <th>면접</th>\n              <th>창의협업역량</th>\n              <th>심층면접</th>\n              <th>직무적성</th>\n              <th>sw역량</th>\n              <th>합계</th>\n              <th>합격여부</th>\n              <th>최종합격전형</th>\n            </tr>\n          </thead>\n          <tbody>\n            {scoreDate?.data.map((i, key) => (\n              <tr key={key}>\n                <td>{key + 1}</td>\n                {/* 순번 */}\n                <td>{i.examCode}</td>\n                {/* 수험번호 */}\n                <td>{i.userName}</td>\n                {/* 이름 */}\n                <td>\n                  {i.gradeType === \"UNGRADUATED\" && \"졸업예정\"}\n                  {i.gradeType === \"GRADUATED\" && \"졸업\"}\n                </td>\n                {/* 학력 */}\n                <td>{i.cityName}</td>\n                {/* 지역 */}\n                <td>\n                  {i.applyType === \"COMMON\" && \"일반전형\"}\n                  {i.applyType === \"SPECIAL\" && \"특별전형\"}\n                  {i.applyType === \"OTHER\" && \"특례입학\"}\n                </td>\n                {/* 1차 합격전형 */}\n                <td>{i.gradeScore}</td>\n                {/* 교과*/}\n                <td>{i.absenceScore}</td>\n                {/* 출결 */}\n                <td>{i.volunteerScore}</td>\n                {/* 봉사 */}\n                <td>{i.additionalScore}</td>\n                {/* 가산점 */}\n                <td>{i.jobAptitudeScore}</td>\n                {/* 직무적성 */}\n                <td>{i.interviewScore}</td>\n                {/* 면접 점수 */}\n                <td>{i.swAbilityScore}</td>\n                {/* sw역량 */}\n                <td>{i.cooperationScore}</td>\n                {/* 창의협업역량 */}\n                <td>{i.totalInterviewScore}</td>\n                {/* 심층면접 */}\n                <td>{i.totalScore}</td>\n                {/* 합계 */}\n                <td>\n                  {i.isPassed === true\n                    ? \"합격\"\n                    : i.isPassed === false\n                    ? \"불합격\"\n                    : \"\"}\n                </td>\n                {/* 합격여부 */}\n                <td>\n                  {i.finalApplyType === \"COMMON\" && \"일반전형\"}\n                  {i.finalApplyType === \"SPECIAL\" && \"특별전형\"}\n                  {i.finalApplyType === \"OTHER\" && \"특례입학\"}\n                </td>\n                {/* 최종합격전형 */}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default SecondTypeScore;\n","import React, { useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport SecondTypeScore from \"components/Admin/SecondTypeScore\";\nimport useStore from \"lib/hooks/useStore\";\nimport { useHistory } from \"react-router-dom\";\nimport ExcelApi from \"assets/api/ExcelApi\";\nimport { SecondScoreResponse } from \"util/types/Response\";\nimport { toast } from \"react-toastify\";\nimport { handleAdmin } from \"lib/handleErrors\";\n\nconst SecondTypeScoreContainer = ({}) => {\n  const history = useHistory();\n  const { store } = useStore();\n  const {\n    GetSoftWare,\n    GetJob,\n    GetCodingTest,\n    GetSecondScoreExcel,\n    uploadSw,\n    uploadCodingTest,\n    uploadJob,\n  } = ExcelApi;\n\n  const [scoreDate, setScoreDate] = useState<SecondScoreResponse>();\n  // 2차 전형 점수를 관리하는 useState\n  const [select, setSelect] = useState<string>(\"0\");\n  // 업로드 다운로드 선택하는 select\n\n  const { getSecondScore } = store.ScoreStore;\n\n  // 2차 전형 점수를 받아오는 함수\n  const handleSecondScore = async () => {\n    await getSecondScore()\n      .then((res) => {\n        setScoreDate(res);\n      })\n      .catch((err) => {\n        handleAdmin(err, history);\n      });\n  };\n\n  // 파일을 다운받는 함수\n  const tryDown = (key: string) => {\n    switch (key) {\n      case \"sw\":\n        GetSoftWare().catch((err) => {\n          toast.error(\"서버 오류입니다\");\n        });\n        break;\n\n      case \"job\":\n        GetJob().catch((err) => {\n          toast.error(\"서버 오류입니다\");\n        });\n        break;\n\n      case \"coding\":\n        GetCodingTest().catch((err) => {\n          toast.error(\"서버 오류입니다\");\n        });\n        break;\n\n      case \"secondScore\":\n        GetSecondScoreExcel().catch((err) => {\n          toast.error(\"서버 오류입니다\");\n        });\n        break;\n    }\n  };\n\n  // 파일 업로드 하는 함수\n  const tryUpload = async (\n    e: React.ChangeEvent<HTMLInputElement>,\n    content: string\n  ) => {\n    if (e.target.files && e.target.files.length) {\n      let file = e.target.files[0];\n      switch (content) {\n        case \"sw\":\n          await uploadSw(file)\n            .then(() => {\n              toast.success(\"파일 업로드 되었습니다\");\n            })\n            .catch((err) => {\n              if (err.response?.status === 400) {\n                toast.warning(\"파일을 잘못선택하였습니다\");\n              }\n            });\n          break;\n        case \"job\":\n          await uploadJob(file)\n            .then(() => {\n              toast.success(\"파일 업로드 되었습니다\");\n            })\n            .catch((err) => {\n              if (err.response?.status === 400) {\n                toast.warning(\"파일을 잘못선택하였습니다\");\n              }\n            });\n          break;\n        case \"coding\":\n          await uploadCodingTest(file)\n            .then(() => {\n              toast.success(\"파일 업로드 되었습니다\");\n            })\n            .catch((err) => {\n              if (err.response?.status === 400) {\n                toast.warning(\"파일을 잘못선택하였습니다\");\n              }\n            });\n          break;\n      }\n      handleSecondScore();\n    }\n  };\n\n  useEffect(() => {\n    handleSecondScore();\n  }, []);\n\n  return (\n    <SecondTypeScore\n      tryDown={tryDown}\n      scoreDate={scoreDate}\n      select={select}\n      setSelect={setSelect}\n      tryUpload={tryUpload}\n    />\n  );\n};\n\nexport default observer(SecondTypeScoreContainer);\n","import React from \"react\";\nimport SecondTypeScoreContainer from \"containers/Admin/SecondTypeScore/SecondTypeScoreContainer\";\nimport DefaultAdminHeader from \"components/Admin/DefaultAdminHeader\";\n\nconst SecondTypeScorePage = () => {\n  return (\n    <DefaultAdminHeader>\n      <SecondTypeScoreContainer />\n    </DefaultAdminHeader>\n  );\n};\n\nexport default SecondTypeScorePage;\n"],"sourceRoot":""}