{"version":3,"sources":["components/Admin/DefaultAdminHeader/DefaultAdminHeader.tsx","components/Admin/AdminReceiptStatus/AdminReceiptStatus.tsx","containers/Admin/AdminReceiptStatus/AdminReceiptStatusContainer.tsx","pages/AdminPage/AdminReceiptStatusPage.tsx"],"names":["DefaultAdminHeader","children","HeaderContainer","theme","className","to","activeClassName","exact","AdminReceiptStatus","receiptStatus","setSearch","setReceiptStatus","search","getReceiptStatusExcel","handleCancelSubmit","onClick","type","placeholder","onChange","e","target","value","filter","name","includes","cityName","examCode","submitCode","schoolName","applyTypeString","map","filteredName","idx","key","birth","moment","format","Convertor","GradeType","gradeType","gradeScore","absenceScore","volunteerScore","additionalScore","commonTotalScore","specialTotalScore","isSubmit","userIdx","res","window","open","observer","store","useStore","history","useHistory","useState","AdminStore","getReceiptStatus","getReceiptStatusCallBack","useCallback","then","data","catch","err","handleAdmin","cancelSubmit","a","Swal","fire","title","text","showCancelButton","icon","cancelButtonText","confirmButtonText","result","isConfirmed","response","status","arr","slice","findIndex","useEffect","AdminReceiptStatusPage"],"mappings":"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","file":"static/js/3.2f2f288f.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./DefaultAdminHeader.scss\";\nimport HeaderContainer from \"containers/Header/HeaderContainer\";\n\ninterface DefaultAdminHeaderProps {\n  children: React.ReactNode;\n}\n\nconst DefaultAdminHeader = ({ children }: DefaultAdminHeaderProps) => {\n  return (\n    <>\n      <HeaderContainer theme={true} />\n      <div className=\"Admin\">\n        <div className=\"Admin-header\">\n          <NavLink\n            to=\"/admin/userList\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>지원자 현황</span>\n          </NavLink>\n          <NavLink\n            to=\"/admin/schoolCity\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>출신교별 현황</span>\n          </NavLink>\n          <NavLink\n            to=\"/admin/userRate\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>입학지원자경쟁률</span>\n          </NavLink>\n          <NavLink\n            to=\"/admin/receiptStatus\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>신입생 입학 전형 원부</span>\n          </NavLink>\n          <NavLink\n            exact\n            to=\"/admin/secondScore\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>2차 전형 점수 관리</span>\n          </NavLink>\n\n          <NavLink\n            to=\"/admin/interviewScore\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>2차 전형 면접 점수</span>\n          </NavLink>\n\n          <NavLink\n            to=\"/admin/userListPassed\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>1차/최종 합격 여부</span>\n          </NavLink>\n\n          <NavLink\n            to=\"/admin/userResultPage\"\n            className=\"Admin-header-link\"\n            activeClassName=\"Admin-header-link-active\"\n          >\n            <span>결과 변경</span>\n          </NavLink>\n        </div>\n      </div>\n      {children}\n    </>\n  );\n};\n\nexport default DefaultAdminHeader;\n","import Convertor from \"lib/Convertor\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Receipt } from \"util/types/ReceiptType\";\nimport \"./AdminReceiptStatus.scss\";\n\ninterface AdminReceiptStatusProps {\n  receiptStatus: Receipt[];\n  setReceiptStatus: React.Dispatch<React.SetStateAction<Receipt[]>>;\n  setSearch: React.Dispatch<React.SetStateAction<string>>;\n  search: string;\n  getReceiptStatusExcel: () => Promise<any>;\n  handleCancelSubmit: (userIdx: number, name: string) => Promise<void>;\n}\n\nconst AdminReceiptStatus = ({\n  receiptStatus,\n  setReceiptStatus,\n  setSearch,\n  search,\n  getReceiptStatusExcel,\n  handleCancelSubmit,\n}: AdminReceiptStatusProps) => {\n  return (\n    <>\n      <div className=\"receipt\">\n        <div className=\"receipt-title\">신입생 입학 전형 원부</div>\n        <div className=\"receipt-btn\" onClick={() => getReceiptStatusExcel()}>\n          현자료 엑셀 내려받기\n        </div>\n\n        <input\n          type=\"text\"\n          className=\"receipt-input\"\n          placeholder=\"통합검색\"\n          onChange={(e) => setSearch(e.target.value)}\n        />\n\n        <table className=\"receipt-list\">\n          <thead>\n            <tr className=\"receipt-list-header\">\n              <th>순번</th>\n              <th>접수번호</th>\n              <th>수험번호</th>\n              <th>성명</th>\n              <th>생년월일</th>\n              <th>지역명</th>\n              <th>출신학교</th>\n              <th>학력</th>\n              <th>전형</th>\n              <th>교과</th>\n              <th>출결</th>\n              <th>봉사</th>\n              <th>가산점</th>\n              <th>점수합계/일반</th>\n              <th>점수합계/특별</th>\n              <th>최종제출여부</th>\n              <th>제출취소</th>\n              <th>원서출력</th>\n            </tr>\n          </thead>\n          <tbody>\n            {search\n              ? receiptStatus\n                  .filter(\n                    (name) =>\n                      (typeof name.name === \"string\" &&\n                        name.name.includes(search)) ||\n                      (typeof name.cityName === \"string\" &&\n                        name.cityName.includes(search)) ||\n                      (typeof name.examCode === \"string\" &&\n                        name.examCode.includes(search)) ||\n                      (typeof name.submitCode === \"string\" &&\n                        name.submitCode.includes(search)) ||\n                      (typeof name.schoolName === \"string\" &&\n                        name.schoolName.includes(search)) ||\n                      (typeof name.applyTypeString === \"string\" &&\n                        name.applyTypeString.includes(search))\n                  )\n                  .map((filteredName, idx) => (\n                    <tr key={idx}>\n                      <td>{filteredName.idx}</td>\n                      <td>{filteredName.submitCode}</td>\n                      <td>{filteredName.examCode}</td>\n                      <td>{filteredName.name}</td>\n                      <td>\n                        {filteredName.birth &&\n                          moment(filteredName.birth).format(\"yyyy-MM-DD\")}\n                      </td>\n                      <td>{filteredName.cityName}</td>\n                      <td>{filteredName.schoolName}</td>\n                      <td>{Convertor.GradeType(filteredName.gradeType)}</td>\n                      <td>{filteredName.applyTypeString}</td>\n                      <td>{filteredName.gradeScore}</td>\n                      <td>{filteredName.absenceScore}</td>\n                      <td>{filteredName.volunteerScore}</td>\n                      <td>{filteredName.additionalScore}</td>\n                      <td>{filteredName.commonTotalScore}</td>\n                      {/* 점수 합계/일반 */}\n                      <td>{filteredName.specialTotalScore}</td>\n                      {/* 점수 합계/특별 */}\n                      <td>{filteredName.isSubmit ? \"제출완료\" : \"미제출\"}</td>\n                      <td>\n                        {filteredName.isSubmit ? (\n                          <button\n                            onClick={() => {\n                              handleCancelSubmit(\n                                filteredName.userIdx,\n                                filteredName.name\n                              );\n                            }}\n                          >\n                            제출취소\n                          </button>\n                        ) : (\n                          \"\"\n                        )}\n                      </td>\n                      <td>\n                        <button>출력</button>\n                      </td>\n                    </tr>\n                  ))\n              : receiptStatus.map((res, idx) => (\n                  <tr key={idx}>\n                    <td>{res.idx}</td>\n                    <td>{res.submitCode}</td>\n                    <td>{res.examCode}</td>\n                    <td>{res.name}</td>\n                    <td>\n                      {res.birth && moment(res.birth).format(\"yyyy-MM-DD\")}\n                    </td>\n                    <td>{res.cityName}</td>\n                    <td>{res.schoolName}</td>\n                    <td>{Convertor.GradeType(res.gradeType)}</td>\n                    <td>{res.applyTypeString}</td>\n                    <td>{res.gradeScore}</td>\n                    <td>{res.absenceScore}</td>\n                    <td>{res.volunteerScore}</td>\n                    <td>{res.additionalScore}</td>\n                    <td>{res.commonTotalScore}</td>\n                    {/* 점수 합계/일반 */}\n                    <td>{res.specialTotalScore}</td>\n                    {/* 점수 합계/특별 */}\n                    <td>{res.isSubmit ? \"제출완료\" : \"미제출\"}</td>\n                    <td>\n                      {res.isSubmit ? (\n                        <button\n                          onClick={() => {\n                            handleCancelSubmit(res.userIdx, res.name);\n                          }}\n                        >\n                          제출취소\n                        </button>\n                      ) : (\n                        \"\"\n                      )}\n                    </td>\n                    <td>\n                      <button\n                        onClick={() =>\n                          window.open(`/print?userIdx=${res.userIdx}`, \"_blank\")\n                        }\n                      >\n                        출력\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\n\nexport default AdminReceiptStatus;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport ReceiptStatus from \"../../../components/Admin/AdminReceiptStatus\";\nimport useStore from \"lib/hooks/useStore\";\nimport { handleAdmin } from \"lib/handleErrors\";\nimport { useHistory } from \"react-router-dom\";\nimport { Receipt } from \"util/types/ReceiptType\";\nimport Swal from \"sweetalert2\";\n\nconst AdminReceiptStatusContainer = ({}) => {\n  const { store } = useStore();\n  const history = useHistory();\n\n  const [receiptStatus, setReceiptStatus] = useState<Receipt[]>([]);\n  const [search, setSearch] = useState<string>(\"\");\n\n  const { getReceiptStatus, getReceiptStatusExcel, handleCancelSubmit } =\n    store.AdminStore;\n\n  //입학 전형 원부 받아오기\n  const getReceiptStatusCallBack = useCallback(() => {\n    getReceiptStatus()\n      .then((res) => {\n        // console.log(\n        //   res.data\n        //     .sort((a, b) => {\n        //       return a.totalScore - b.totalScore;\n        //     })\n        //     .map((user) => user.totalScore)\n        // );\n        setReceiptStatus(res.data);\n      })\n      .catch((err) => {\n        handleAdmin(err, history);\n      });\n  }, []);\n\n  const cancelSubmit = useCallback(\n    async (userIdx: number, name: string) => {\n      Swal.fire({\n        title: \"주의!!\",\n        text: `해당 유저(${name}) 를 제출 취소하시겠습니까?`,\n        showCancelButton: true,\n        icon: \"warning\",\n        cancelButtonText: \"취소\",\n        confirmButtonText: \"확인\",\n      }).then(async (result) => {\n        if (result.isConfirmed) {\n          await handleCancelSubmit(userIdx).then((response) => {\n            if (response.status === 200) {\n              const arr = receiptStatus.slice();\n              const idx = arr.findIndex((data) => data.userIdx === userIdx);\n              arr[idx].isSubmit = false;\n              arr[idx].submitCode = \"\";\n              arr[idx].examCode = \"\";\n              setReceiptStatus(arr);\n            }\n          });\n        }\n      });\n    },\n    [receiptStatus]\n  );\n\n  useEffect(() => {\n    getReceiptStatusCallBack();\n  }, [getReceiptStatusCallBack]);\n\n  return (\n    <>\n      <ReceiptStatus\n        receiptStatus={receiptStatus}\n        setSearch={setSearch}\n        search={search}\n        getReceiptStatusExcel={getReceiptStatusExcel}\n        handleCancelSubmit={cancelSubmit}\n        setReceiptStatus={setReceiptStatus}\n      />\n    </>\n  );\n};\n\nexport default observer(AdminReceiptStatusContainer);\n","import DefaultAdminHeader from \"components/Admin/DefaultAdminHeader\";\nimport React from \"react\";\nimport AdminReceiptStatus from \"../../containers/Admin/AdminReceiptStatus/AdminReceiptStatusContainer\";\n\nconst AdminReceiptStatusPage = () => {\n  return (\n    <DefaultAdminHeader>\n      <AdminReceiptStatus />\n    </DefaultAdminHeader>\n  );\n};\n\nexport default AdminReceiptStatusPage;\n"],"sourceRoot":""}